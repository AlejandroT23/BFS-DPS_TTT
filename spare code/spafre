for (int i = 1; i < 10; i++) {
        Node* childNode = new Node;
        childNode->parent = root;
        
        childNode->board = new TicTacToeBoard();
        
        int currentCol = i % 3;
        
        if (i % 3 == 0) {
            int currentRow = (i % 3) - 1;
        } else {
            int currentRow = i % 3;
        }
        
//        childNode->board->setSquare(currentRow, currentCol, 'X'); REPLACE X with proper syntax
        
        root->children.push_back(childNode);
    }
    
    for (int j = 0; j < root->children.size(); j++) {
        buildFullTreeHelper(root->children[j]);
    }

    //-- Original part of inital function

    // since this is start, we might be able to get away with hard coding X
    for (int row = 0; row < boardDim; row++){
        for (int col = 0; col < boardDim; col++) {
            TicTacToeBoard::SQUARE_OCCUPANT currentSpace = root->board->getSquare(row, col);
            
            if (currentSpace == TicTacToeBoard::EMPTY) {
                Node* child = new Node;
                child->parent = root;
                child->board = new TicTacToeBoard();
                
                if (currentTurn == TicTacToeBoard::X_TURN) {
                    child->board->setSquare(row, col, TicTacToeBoard::X);
                } else {
                    child->board->setSquare(row, col, TicTacToeBoard::O);
                }
                
                root->children.push_back(child);
                
            }
        }
    }
    
    for (int k = 0; k < root->children.size(); k++) {
        buildFullTreeHelper(root->children[k]);
    }